{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.47.11",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "jewish-holidays!",
  "docComment": "",
  "name": "jewish-holidays",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "jewish-holidays!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "jewish-holidays!Holiday:interface",
          "docComment": "/**\n * Represents a Jewish holiday.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface Holiday "
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "releaseTag": "Public",
          "name": "Holiday",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "jewish-holidays!Holiday#day:member",
              "docComment": "/**\n * The day of the month on which the holiday occurs.\n *\n * @remarks\n *\n * This value should be a number between 1 and 30, depending on the month.\n *\n * @example\n *\n * // Example: 15th of the month const holiday: Holiday = \\{ day: 15, monthName: \"Nisan\", name: \"Passover\" \\};\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "day: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "day",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "jewish-holidays!Holiday#monthName:member",
              "docComment": "/**\n * The name of the month in which the holiday falls.\n *\n * @remarks\n *\n * This should be of type `JewishMonthType`, representing the specific month in the Jewish calendar.\n *\n * @example\n *\n * // Example: Nisan const holiday: Holiday = \\{ day: 15, monthName: \"Nisan\", name: \"Passover\" \\};\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "monthName: "
                },
                {
                  "kind": "Reference",
                  "text": "JewishMonthType",
                  "canonicalReference": "jewish-date!JewishMonthType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "monthName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "jewish-holidays!Holiday#name:member",
              "docComment": "/**\n * The official name of the holiday.\n *\n * @remarks\n *\n * This should be a string representing the name of the holiday, such as \"Passover\" or \"Rosh Hashanah\".\n *\n * @example\n *\n * // Example: \"Passover\" const holiday: Holiday = \\{ day: 15, monthName: \"Nisan\", name: \"Passover\" \\};\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "jewish-holidays!isHoliday:function(1)",
          "docComment": "/**\n * Return if the date exists in holyday list\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isHoliday: (jewishDate: "
            },
            {
              "kind": "Reference",
              "text": "BasicJewishDate",
              "canonicalReference": "jewish-date!BasicJewishDate:interface"
            },
            {
              "kind": "Content",
              "text": ", holidayList: "
            },
            {
              "kind": "Reference",
              "text": "Holiday",
              "canonicalReference": "jewish-holidays!Holiday:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "jewishDate",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "holidayList",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "isHoliday"
        },
        {
          "kind": "Function",
          "canonicalReference": "jewish-holidays!isShabbat:function(1)",
          "docComment": "/**\n * Checks if a given date is Shabbat (the Jewish Sabbath).\n *\n * @remarks\n *\n * Shabbat begins at sundown on Friday and ends at nightfall on Saturday. In the Gregorian calendar, Shabbat corresponds to Saturday, which is represented by `getDay() === 6`.\n *\n * @param date - The date to check, which can be a JavaScript `Date` object or a `BasicJewishDate` object.\n *\n * @returns A boolean indicating whether the provided date falls on Shabbat.\n *\n * @example\n *\n * // Example: Check if a specific date is Shabbat const date = new Date('2023-10-21'); // Saturday const result = isShabbat(date); // true\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isShabbat: (date: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BasicJewishDate",
              "canonicalReference": "jewish-date!BasicJewishDate:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isShabbat"
        },
        {
          "kind": "Function",
          "canonicalReference": "jewish-holidays!isYomTov:function(1)",
          "docComment": "/**\n * Determines if a given date is a Yom Tov (Jewish holiday).\n *\n * This function accepts either a Gregorian date or a BasicJewishDate object and checks if it corresponds to a Yom Tov in either Israel or Chutz Laaretz (the diaspora).\n *\n * @param date - The date to check, which can be either: - A Gregorian date object, or - An object representing a Jewish date with properties `day`, `monthName`, and `year`.\n *\n * @param isChutzLaaretz - A boolean indicating whether to check against Yom Tov dates observed in Chutz Laaretz. Defaults to `false`, meaning it checks only for Israeli holidays.\n *\n * @returns Returns `true` if the given date is a Yom Tov, and `false` otherwise.\n *\n * @example\n *\n * const isRoshHashanah = isYomTov(new Date(2024, 9, 3)); // true const isSukkotInChutzLaaretz = isYomTov(\\{ day: 16, monthName: \"Tishri\", year: 5785 \\}, true); // true\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isYomTov: (date: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BasicJewishDate",
              "canonicalReference": "jewish-date!BasicJewishDate:interface"
            },
            {
              "kind": "Content",
              "text": ", isChutzLaaretz?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "dist/index.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "isChutzLaaretz",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "isYomTov"
        }
      ]
    }
  ]
}
